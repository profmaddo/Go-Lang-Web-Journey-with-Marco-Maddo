# Dockerfile for Lecture 05 â€“ SQLite Integration

# ğŸ‡ºğŸ‡¸ Builder stage: compiles the Go binary with SQLite support (CGO enabled)
# ğŸ‡§ğŸ‡· Etapa de build: compila o binÃ¡rio Go com suporte ao SQLite (CGO ativado)
FROM golang:1.21 AS builder

WORKDIR /app

COPY . .

# ğŸ‡ºğŸ‡¸ Build with CGO enabled (required for sqlite3)
# ğŸ‡§ğŸ‡· Compila com CGO ativado (necessÃ¡rio para sqlite3)
RUN go build -o webserver

# ğŸ‡ºğŸ‡¸ Runtime stage
# ğŸ‡§ğŸ‡· Etapa de execuÃ§Ã£o
FROM alpine:latest

# ğŸ‡ºğŸ‡¸ Install SQLite dependencies
# ğŸ‡§ğŸ‡· Instala dependÃªncias do SQLite
RUN apk add --no-cache sqlite-libs

WORKDIR /root/

# ğŸ‡ºğŸ‡¸ Copy compiled binary
# ğŸ‡§ğŸ‡· Copia o binÃ¡rio compilado
COPY --from=builder /app/webserver .

# ğŸ‡ºğŸ‡¸ Copy templates and static assets
# ğŸ‡§ğŸ‡· Copia os templates HTML e os arquivos estÃ¡ticos
COPY --from=builder /app/templates ./templates
COPY --from=builder /app/static ./static

# ğŸ‡ºğŸ‡¸ Create a mount point for external database folder
# ğŸ‡§ğŸ‡· Cria um ponto de montagem para a pasta de banco de dados externa
VOLUME ["/database"]

# ğŸ‡ºğŸ‡¸ Use the volume path in app: /database/phones.db
# ğŸ‡§ğŸ‡· O caminho do banco usado na aplicaÃ§Ã£o serÃ¡ /database/phones.db

# docker build -t go-webapp-sqlite .
# docker run -d -p 8080:8080 -v $(pwd)/database:/database go-webapp-sqlite


EXPOSE 8080

CMD ["./webserver"]
